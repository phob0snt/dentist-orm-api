import asyncio
import logging
import os
import sys

from consumer import consumer
from producer import producer
from rpc_client import rpc_client

# –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)
async def main():
    logger.info("üöÄ === –ó–∞–ø—É—Å–∫ Notification Service ===")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∏—Ç—å producer
        logger.info("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ producer...")
        await producer.connect()
        logger.info("‚úÖ Producer –ø–æ–¥–∫–ª—é—á–µ–Ω")
        await rpc_client.connect()
        logger.info("‚úÖ RPC Client –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å consumer –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ consumer...")
        consumer_task = asyncio.create_task(consumer.run())
        logger.info("‚úÖ Consumer –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞")
        
        # –ñ–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è consumer
        await consumer_task
        
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω SIGINT")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å consumer
        await consumer.stop()
        
        # –û—Ç–∫–ª—é—á–∏—Ç—å producer
        await producer.disconnect()
        
        logger.info("üèÅ === Notification Service –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ===")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)