import asyncio
import json
import logging
import aio_pika

from schemas.notification import LeadNotification
from config import RabbitMQConfig
from producer import producer
from rpc_client import rpc_client

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

class Consumer:
    def __init__(self, config: RabbitMQConfig):
        self.config = config
        self.connection: aio_pika.Connection = None
        self.channel: aio_pika.Channel = None
        self.exchange: aio_pika.Exchange = None
        self.lead_queue: aio_pika.Queue = None

    async def connect(self):
        if self.connection:
            return
        
        try:
            logger.info(f"üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ: {self.config.amqp_url}")
            self.connection = await aio_pika.connect_robust(self.config.amqp_url)
            self.channel = await self.connection.channel()
            await self.channel.set_qos(prefetch_count=self.config.prefetch_count)

            self.lead_queue = await self.channel.declare_queue(
                self.config.notification_lead_queue, 
                durable=True
            )

            logger.info("‚úÖ Consumer –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ RabbitMQ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            raise
    
    async def handle_message(self, message: aio_pika.IncomingMessage):
        try:
            body = message.body.decode('utf-8')
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {body}")
            
            data = json.loads(body)
            notification = LeadNotification.model_validate(data)

            chat_id = await rpc_client.call_users_service(
                method="get_tg_by_user_id",
                data={
                    "user_id": notification.user_id
                }
            )

            bot_message = {
                "chat_id": int(chat_id),
                "message": f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏ #{notification.lead_id} "
                           f"–∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {notification.status}",
                "type": "lead_update"
            }

            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {bot_message}")
            await producer.publish(bot_message)
            await message.ack()
            logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def start_consuming(self):
        if not self.connection:
            await self.connect()
        
        try:
            await self.lead_queue.consume(self.handle_message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è: {e}")
            raise
    async def disconnect(self):
        if self.connection:
            self.connection.close()

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª consumer"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ consumer...")
            
            await self.connect()
            
            await self.start_consuming()
            
            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ —Ä–∞–±–æ—Ç—ã
            self._running = True
            logger.info("‚úÖ Consumer —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
            
            # –ñ–¥–∞—Ç—å –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            while self._running:
                await asyncio.sleep(1)
                
        except asyncio.CancelledError:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ consumer: {e}")
            raise
        finally:
            await self.disconnect()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å consumer"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ consumer...")
        self._running = False
        

consumer = Consumer(RabbitMQConfig())