from datetime import datetime
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from keyboards.reply import lead_type_kb, cancel_kb, skip_kb, back_to_menu_kb
from schemas.lead import LeadCreate
from utils.decorators import require_auth
from services.user_cache import get_leads_cached, get_user_data_cached
from states.states import CreateLeadStates
from services.api_client import create_lead

router = Router()

@router.message(Command("createLead"))
@require_auth(redirect_to_auth=True)
async def start_lead_creation(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É", reply_markup=lead_type_kb, parse_mode="Markdown")
    await state.set_state(CreateLeadStates.lead_service_type)

@router.message(CreateLeadStates.lead_service_type, F.text.in_(
    ["–ì–∏–≥–∏–µ–Ω–∞", "–õ–µ—á–µ–Ω–∏–µ", "–ü—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", "–î—Ä—É–≥–æ–µ"]
))
async def service_type_selected(message: Message, state: FSMContext):
    await state.update_data(service_type=message.text)
    await message.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞: **{message.text}**")
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: '25.12 14:30'",
        reply_markup=cancel_kb
    )
    await state.set_state(CreateLeadStates.lead_preferred_date)

@router.message(CreateLeadStates.lead_preferred_date)
async def get_preferred_date(message: Message, state: FSMContext):
    try:
        preferred_date = datetime.strptime(message.text, "%d.%m %H:%M").replace(year=datetime.now().year)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12 14:30)")
        return
    
    await state.update_data(preferred_date=preferred_date.isoformat())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π / –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã", reply_markup=skip_kb)
    await state.set_state(CreateLeadStates.lead_comment)

@router.message(CreateLeadStates.lead_comment)
async def get_comment(message: Message, state: FSMContext):
    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        comment = ""
    else:
        comment = message.text
    
    data = await state.get_data()
    user_data = await get_user_data_cached(message.from_user.id)

    lead = LeadCreate(
        user_id=user_data.id,
        service_type=data.get("service_type"),
        preferred_date=data.get("preferred_date"),
        comment=comment
    )
    
    if await create_lead(message.from_user.id, lead):
        await message.answer(
            "üéâ **–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
            f"ü¶∑ –£—Å–ª—É–≥–∞: {data.get('service_type')}\n\n"
            f"üìÖ –ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {data.get('preferred_date')}\n\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
            f"üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–µ—Ç–∞–ª–µ–π."
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!",
            reply_markup=back_to_menu_kb,
            parse_mode="Markdown"
        )
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∑–∞—è–≤–∫–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞")

    await state.clear()

@router.message(Command("showLeads"))
async def show_leads(message: Message):
    leads = await get_leads_cached(message.from_user.id)

    if not leads:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π!", reply_markup=back_to_menu_kb)
        return
    
    message_text = "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
    for lead in leads:
        preferred_date = datetime.fromisoformat(lead.preferred_date)
        message_text += (
            f"–¢–∏–ø —É—Å–ª—É–≥–∏: {lead.service_type}\n"
            f"–ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {preferred_date.strftime('%d.%m –≤ %H:%M')}\n"
            f"–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {lead.appointment_date if lead.appointment_date else '–ù–µ —É—Ç–æ—á–Ω–µ–Ω–æ'}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {lead.comment}\n\n"
        )

    await message.answer(message_text, reply_markup=back_to_menu_kb)